// <auto-generated />
using System;
using PropertySystem.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace PropertySystem.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250802045355_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PropertySystem.Domain.PaymentIntentions.PaymentIntention", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasColumnName("status");

                    b.Property<long>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bigint")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_payment_intention");

                    b.ToTable("payment_intention", (string)null);
                });

            modelBuilder.Entity("PropertySystem.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("BusinessUnit")
                        .HasColumnType("int")
                        .HasColumnName("business_unit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("first_name");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("full_name");

                    b.Property<string>("Identification")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("identification");

                    b.Property<DateTime>("InactiovationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("inactiovation_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("last_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("password");

                    b.Property<Guid>("Role")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasColumnName("second_name");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("PropertySystem.Domain.PaymentIntentions.PaymentIntention", b =>
                {
                    b.OwnsOne("PropertySystem.Domain.PaymentIntentions.Client", "Client", b1 =>
                        {
                            b1.Property<Guid>("PaymentIntentionId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<string>("Branch")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("client_branch");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("client_email");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("client_name");

                            b1.Property<string>("Nit")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("client_nit");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("client_phone");

                            b1.HasKey("PaymentIntentionId");

                            b1.ToTable("payment_intention");

                            b1.WithOwner()
                                .HasForeignKey("PaymentIntentionId")
                                .HasConstraintName("fk_payment_intention_payment_intention_id");
                        });

                    b.OwnsOne("PropertySystem.Domain.PaymentIntentions.DateRange", "Dates", b1 =>
                        {
                            b1.Property<Guid>("PaymentIntentionId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("created_at");

                            b1.Property<DateTime?>("ExpiresAt")
                                .HasColumnType("datetime2")
                                .HasColumnName("expires_at");

                            b1.HasKey("PaymentIntentionId");

                            b1.ToTable("payment_intention");

                            b1.WithOwner()
                                .HasForeignKey("PaymentIntentionId")
                                .HasConstraintName("fk_payment_intention_payment_intention_id");
                        });

                    b.OwnsOne("PropertySystem.Domain.PaymentIntentions.DocumentInformation", "DocumentInformation", b1 =>
                        {
                            b1.Property<Guid>("PaymentIntentionId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<bool?>("CollectShipping")
                                .HasColumnType("bit")
                                .HasColumnName("collect_shipping");

                            b1.Property<string>("DynamicValue")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("dynamic_value");

                            b1.Property<bool?>("SingleUse")
                                .HasColumnType("bit")
                                .HasColumnName("single_use");

                            b1.Property<bool?>("StatusEmail")
                                .HasColumnType("bit")
                                .HasColumnName("status_email");

                            b1.Property<string>("TransactionId")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("transaction_id");

                            b1.Property<string>("User")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("user");

                            b1.HasKey("PaymentIntentionId");

                            b1.ToTable("payment_intention");

                            b1.WithOwner()
                                .HasForeignKey("PaymentIntentionId")
                                .HasConstraintName("fk_payment_intention_payment_intention_id");
                        });

                    b.OwnsOne("PropertySystem.Domain.PaymentIntentions.Key", "Key", b1 =>
                        {
                            b1.Property<Guid>("PaymentIntentionId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<string>("App")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("app");

                            b1.Property<int>("BusinessUnit")
                                .HasColumnType("int")
                                .HasColumnName("business_unit");

                            b1.Property<string>("Document")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("document");

                            b1.Property<string>("DocumentPayment")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("document_payment");

                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("user_id");

                            b1.Property<int>("Wallet")
                                .HasColumnType("int")
                                .HasColumnName("wallet");

                            b1.HasKey("PaymentIntentionId");

                            b1.ToTable("payment_intention");

                            b1.WithOwner()
                                .HasForeignKey("PaymentIntentionId")
                                .HasConstraintName("fk_payment_intention_payment_intention_id");
                        });

                    b.OwnsOne("PropertySystem.Domain.PaymentIntentions.Money", "Money", b1 =>
                        {
                            b1.Property<Guid>("PaymentIntentionId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)")
                                .HasColumnName("money_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("money_currency");

                            b1.HasKey("PaymentIntentionId");

                            b1.ToTable("payment_intention");

                            b1.WithOwner()
                                .HasForeignKey("PaymentIntentionId")
                                .HasConstraintName("fk_payment_intention_payment_intention_id");
                        });

                    b.OwnsOne("PropertySystem.Domain.PaymentIntentions.Session", "Session", b1 =>
                        {
                            b1.Property<Guid>("PaymentIntentionId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<string>("IdSession")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("id_session");

                            b1.Property<string>("TokenSession")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("token_session");

                            b1.HasKey("PaymentIntentionId");

                            b1.ToTable("payment_intention");

                            b1.WithOwner()
                                .HasForeignKey("PaymentIntentionId")
                                .HasConstraintName("fk_payment_intention_payment_intention_id");
                        });

                    b.OwnsOne("PropertySystem.Domain.PaymentIntentions.Supplier", "Supplier", b1 =>
                        {
                            b1.Property<Guid>("PaymentIntentionId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<string>("SupplierMessage")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("supplier_message");

                            b1.HasKey("PaymentIntentionId");

                            b1.ToTable("payment_intention");

                            b1.WithOwner()
                                .HasForeignKey("PaymentIntentionId")
                                .HasConstraintName("fk_payment_intention_payment_intention_id");
                        });

                    b.OwnsOne("PropertySystem.Domain.PaymentIntentions.Urls", "Urls", b1 =>
                        {
                            b1.Property<Guid>("PaymentIntentionId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<string>("ImageUrl")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("image_url");

                            b1.Property<string>("RedirectUrl")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("redirect_url");

                            b1.Property<string>("Url")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("url");

                            b1.HasKey("PaymentIntentionId");

                            b1.ToTable("payment_intention");

                            b1.WithOwner()
                                .HasForeignKey("PaymentIntentionId")
                                .HasConstraintName("fk_payment_intention_payment_intention_id");
                        });

                    b.Navigation("Client")
                        .IsRequired();

                    b.Navigation("Dates")
                        .IsRequired();

                    b.Navigation("DocumentInformation")
                        .IsRequired();

                    b.Navigation("Key")
                        .IsRequired();

                    b.Navigation("Money")
                        .IsRequired();

                    b.Navigation("Session")
                        .IsRequired();

                    b.Navigation("Supplier")
                        .IsRequired();

                    b.Navigation("Urls")
                        .IsRequired();
                });

            modelBuilder.Entity("PropertySystem.Domain.Users.User", b =>
                {
                    b.OwnsOne("PropertySystem.Domain.Users.UserContact", "UserContact", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("varchar(200)")
                                .HasColumnName("user_contact_address");

                            b1.Property<string>("Phone")
                                .IsRequired()
                                .HasColumnType("varchar(15)")
                                .HasColumnName("user_contact_phone");

                            b1.HasKey("UserId");

                            b1.ToTable("user");

                            b1.WithOwner()
                                .HasForeignKey("UserId")
                                .HasConstraintName("fk_user_user_id");
                        });

                    b.Navigation("UserContact")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
